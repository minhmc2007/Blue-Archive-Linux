name: Build Blue Archive Linux ISO

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type to use'
        required: true
        default: 'debug'
        type: choice
        options:
        - debug
        - stable
      publish_release:
        description: 'Publish to GitHub Pre-Release (generates full commit history)'
        required: true
        default: false
        type: boolean

jobs:
  build-iso:
    runs-on: ubuntu-latest
    # Define outputs to pass information to the release job
    outputs:
      # CORRECTED: This now uses the step output to guarantee the value is passed correctly
      artifact_name: Blue-Archive-Linux-ISO-${{ steps.configure_build.outputs.build_type }}-${{ github.run_number }}
      iso_basename: ${{ steps.verify_iso.outputs.iso_basename }}
      build_type: ${{ steps.configure_build.outputs.build_type }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      # Fetch all history so the release notes can be generated later
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install and configure Docker
      run: |
        sudo systemctl start docker
        sudo systemctl enable docker
        sudo usermod -aG docker $USER
        docker --version

    - name: Configure build type
      id: configure_build
      run: |
        BUILD_TYPE="${{ github.event.inputs.build_type || 'debug' }}"
        echo "BUILD_TYPE := $BUILD_TYPE" > .build_config
        echo "Configured build type: $BUILD_TYPE"
        cat .build_config
        # Set output for other jobs and steps to use
        echo "build_type=$BUILD_TYPE" >> "$GITHUB_OUTPUT"

    - name: Build ISO using Makefile
      run: |
        echo "Starting ISO build process..."
        make build

    - name: Verify ISO creation and set outputs
      id: verify_iso
      run: |
        ls -la ~/
        ISO_FILE=$(find ~/ -name "Blue_Archive_Linux_amd64-*.iso" -type f | head -1)
        if [ -z "$ISO_FILE" ]; then
          echo "Error: No ISO file found!"
          exit 1
        fi
        echo "ISO file found: $ISO_FILE"
        echo "ISO_FILE=$ISO_FILE" >> "$GITHUB_ENV"
        ISO_BASENAME=$(basename "$ISO_FILE")
        echo "iso_basename=$ISO_BASENAME" >> "$GITHUB_OUTPUT"

    - name: Upload ISO as a build artifact
      uses: actions/upload-artifact@v4
      with:
        # This now uses the step output to ensure the name is correct
        name: Blue-Archive-Linux-ISO-${{ steps.configure_build.outputs.build_type }}-${{ github.run_number }}
        path: ${{ env.ISO_FILE }}
        retention-days: 30
        compression-level: 0

    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ github.run_number }}
        path: .build_config
        retention-days: 7

    - name: Clean up workspace
      if: always()
      run: |
        make clean || true
        docker system prune -af || true

  release:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.publish_release == 'true'
    needs: build-iso
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download ISO artifact from build job
      uses: actions/download-artifact@v4
      with:
        # This will now receive the CORRECT name from the build job's output
        name: ${{ needs.build-iso.outputs.artifact_name }}
        path: iso-dist

    - name: Create GitHub Pre-Release and Upload ISO
      uses: softprops/action-gh-release@v2
      with:
        tag_name: build-${{ github.run_number }}
        name: Build ${{ github.run_number }} (${{ needs.build-iso.outputs.build_type }})
        generate_release_notes: true
        prerelease: true
        files: iso-dist/${{ needs.build-iso.outputs.iso_basename }}
